=======================================================================================
INSTALL FILE FOR PACKAGE : 'TVPVRD'
'tvpvrd' = TV Personal Video Recorder Daemon
$Id$

Copyright (C) 2010,2011,2012 Johan Persson (johan162@gmail.com)
=======================================================================================

Installation Instructions for tvpvrd
====================================

**************************** IMPORTANT ! *****************************************
See bottom of page (Installing From Repository) for extra steps if you have 
downloaded  directly from the subversion repository. This requires some autotools 
setup. If you are not comfortable with this please use the prepared tar-ball.
**********************************************************************************

Quick installation using the tar-ball-package
=============================================

For the impatient:

Step 1.
-------
$>./stdbuild.sh
[lots of output ...]

Step 2. 
-------
$> sudo make install

The above will run the configure script with the most common installation
directories on modern system as well as do a reasonable silent build.
The daemon will be installed under /usr/bin and the config files under
/etc/tvpvrd

The next step is to make some (minimal) adjustments in the configuration file
to adapt to your server setup.

Basic Installation
==================

   Briefly, the shell commands `./configure; make; make install' should
configure, build, and install this package.  The following
more-detailed instructions are generic; see the `README' file for
instructions specific to this package.

We recommend the following basic configuration arguments for a modern
installation 

$> ./configure --prefix=/usr --sysconfdir=/etc

This will put the executable in '/usr/bin' and then create the 
configuration directory '/etc/tvpvrd/'. Without these argument the 
default base installation location will be '/usr/local' 
(and '/usr/local/etc')

The simplest way to compile and install this package is:

  1. `cd' to the directory containing the package's source code and type
     `./configure' (see above) to configure the package for your system.

     Running `configure' might take a while.  While running, it prints
     some messages telling which features it is checking for.

  2. Type `make' to compile the package. On most modern system the compile
     will be faster using 'make -j N' where N is replaced by the twice
     the number of CPU cores available.
     
  3. Switch to root user and type `make install' to install the programs 
     and any data files and documentation. Then adjust the configuration file
     in the configuration directory by starting with one of the two
     templates tvpvrd.conf.full.template or tvpvrd.conf.simplified.template
     and then copy it to tvpvrd.conf and make chnages according to your
     preference. (More information in the next section).

  4. You can remove the program binaries and object files from the
     source code directory by typing `make clean'.  To also remove the
     files that `configure' created (so you can compile the package for
     a different kind of computer), type `make distclean'.  There is
     also a `make maintainer-clean' target, but that is intended mainly
     for the package's developers.  If you use it, you may have to get
     all sorts of other programs in order to regenerate files that came
     with the distribution.


Using mod_proxy in apache Web-server to access the Web interface
================================================================

Normally the Web interface is accessed by connecting to the host where
the daemon is installed on port 9301 (one more than the port for the
command interface). For example if the server is installed on the
localhost the URL

http://localhost:9301/

would connect to the daemon Web-interface (assuming it is eanbled in the 
config file of tvpvrd)

This can however be a problem if you want to access the daemon on your
server as a regular web-site. For example to be able to connect from a client
which only allows plain http (or https) traffic and blocks all other ports.

This can be easily solved by using apache as a proxy. By enabling the module
mod_proxy you can add, for example, the lines


ProxyRequests Off

<Proxy *>
  Order deny,allow
  Allow from all
</Proxy>

ProxyPass /pvr http://localhost:9301
ProxyPassReverse /pvr http://localhost:9301


in the apache config file for the main or virtual host. This makes it possible
to access the server by giving the URL

http://localhost/pvr/

instead. See Apache mod_proxy for explanation of the specific settings.


Some additional notes on configuration file
===========================================
There are quite a few optional settings in the configuration file. Some
configurations really must be adapted to the local server (like directories
where to store videos) but for the majority of users the default values
for most settings should be ok.

In order to simplify the process of adjusting the config file there are two
templates for the config file. One simplified which only contains the most
common options (which uses the default values for all other settings)
and one full template. Use one of these templates, the choice  is yours,
and then copy it to a file 'tvpvrd.conf" in the config directory and make
the necessary changes.

Installing the optional tvpowerd daemon
=======================================

The optional power daemon can be found under 'src/tvpowerd'. Since it is supposed
to be installed on a different server than the recording daemon it will not be
installed with the make install command. Instead copy the distribution package
to the server where you want to run the power daemon, configure and compile as
usual and then run the 'install.sh' script as root.
(The install.sh is found in the tvpowerd directory)


Notes on Specific Linux distributions
=====================================

Generic
-------
The package requires the three libraries libpcre (Perl Compatible Regular
expressions), libiniparser (a library to read ini files) and libxml2.

For most Linux distributions those packages are available under names
similar to "libpcre3-devel", "libiniparser-devel" and "libxml2-devel".

If the iniparser library cannot be found the package will use a built-in
version in order to make the installation as smooth as possible.

OpenSuSE
--------
The package is known to build and install without any problems.
The two necessary libraries are available as packages
 - libiniparser-devel and 
 - pcre-devel
 - libxml2-devel

Fedora 13
---------
The package is known to build and install without any problems. All
needed libraries are available as pre-built packages.

Ubuntu 10.10
------------
The package itself is know to build without any problem but
unfortunately there doesn't seem to be a pre-built package of
iniparser library. So a built-in version will be used.

However it is recommended to try to install the iniparser library since
many other packages rely on this library as well.

1. Download the iniparser library from http://ndevilla.free.fr/iniparser/

2. Unpack and move to the installed directory and run 'make'

3. Install the libraries (as root)
   a) cp src/iniparser.h src/dictionary.h /usr/include
   b) cp libiniparser.a libiniparser.so.0 /usr/lib
   c) ln -s /usr/lib/libiniparser.so.0 /usr/lib/libiniparser.so
   d) Update the linker cache by running:
      $>ldconfig

You should now be able to compile and install the tvpvrd package

`configure' Invocation
======================

   `configure' recognizes the following options to control how it
operates.

`--help'
`-h'
     Print a summary of all of the options to `configure', and exit.

`--help=short'
`--help=recursive'
     Print a summary of the options unique to this package's
     `configure', and exit.  The `short' variant lists options used
     only in the top level, while the `recursive' variant lists options
     also present in any nested packages.

`--version'
`-V'
     Print the version of Autoconf used to generate the `configure'
     script, and exit.

`--cache-file=FILE'
     Enable the cache: use and save the results of the tests in FILE,
     traditionally `config.cache'.  FILE defaults to `/dev/null' to
     disable caching.

`--config-cache'
`-C'
     Alias for `--cache-file=config.cache'.

`--quiet'
`--silent'
`-q'
     Do not print messages saying which checks are being made.  To
     suppress all normal output, redirect it to `/dev/null' (any error
     messages will still be shown).

`--srcdir=DIR'
     Look for the package's source code in directory DIR.  Usually
     `configure' can determine that directory automatically.

`--prefix=DIR'
     Use DIR as the installation prefix.  *Note Installation Names::
     for more details, including other options available for fine-tuning
     the installation locations.

`--sysconfdir=DIR'
    Use DIR as rpefix for system configuration files. This is normally /etc or
    /usr/local/etc

`--no-create'
`-n'
     Run the configure checks, but stop before creating any output
     files.

`configure' also accepts some other, not widely useful, options.  Run
`configure --help' for more details.


Installing From Repository
==========================

If you are not using the tar ball but have just grabbed the latest source from the
repository there are two things to keep in mind.

1. It may not build ... there is no guarantee that any arbitrary snapshot of the
   repository represents a stable, tested environment.

2. You must have the autotools available. If you do not know what this is then please
   use the prepared package.

If despite these warnings you want to go ahead. Then read on.

Setting up a  build environment
-------------------------------
If you have downloaded the latest trunk all necessary build file for the autotools (eg.
configure.ac) are available.

The configuration scripts uses some features (silent builds) which are only available in
autotools 2.65 and above so you need to have those installed to re-build the build
environment.

Move to the root directory of tvpvrd (where configure.ac is) and type

$>autoreconf

This will rebuild the "configure" file and the necessary "Makefile.in" in all relevant
subdirectories.

Now continue as usual.


A final note:
There are two schools of thought on what to save in the repository. One schools argues that
only original source files should be stored there and not generated files based on the
source files. The other school of thought argues that for ease of use the repository
should contain necessary files so that even an non-developer user can re-build the package.

I subscribe to the first view. This keeps the repository clean and it also reduces false
reports of problems when people without necessary experience have failed to correctly build
the source directly from the repository. It will also avoid a lot of unnecessary traffic to
the repository just to keep the generated files in sync.
[EOF]

